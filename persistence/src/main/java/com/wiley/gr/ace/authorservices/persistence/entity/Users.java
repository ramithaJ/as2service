package com.wiley.gr.ace.authorservices.persistence.entity;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;

/**
 * Users generated by hbm2java
 */
@Entity
@Table(name = "USERS")
public class Users implements java.io.Serializable {

	private Integer userId;
	private String emailAddr;
	private Date createdDate;
	private String createdBy;
	private Date updatedDate;
	private String updatedBy;
	private Set<UserReferenceData> userReferenceDatas = new HashSet<UserReferenceData>(
			0);
	private AdminDetails adminDetails;
	private AuthorProfile authorProfile;
	private Set<Roles> roleses = new HashSet<Roles>(0);
	private Set<AdditionalPermissions> additionalPermissionses = new HashSet<AdditionalPermissions>(
			0);

	public Users() {
	}

	public Users(Integer userId) {
		this.userId = userId;
	}

	public Users(Integer userId, String emailAddr, Date createdDate,
			String createdBy, Date updatedDate, String updatedBy,
			Set<UserReferenceData> userReferenceDatas,
			AdminDetails adminDetails, AuthorProfile authorProfile,
			Set<Roles> roleses,
			Set<AdditionalPermissions> additionalPermissionses) {
		this.userId = userId;
		this.emailAddr = emailAddr;
		this.createdDate = createdDate;
		this.createdBy = createdBy;
		this.updatedDate = updatedDate;
		this.updatedBy = updatedBy;
		this.userReferenceDatas = userReferenceDatas;
		this.adminDetails = adminDetails;
		this.authorProfile = authorProfile;
		this.roleses = roleses;
		this.additionalPermissionses = additionalPermissionses;
	}

	@Id
	@Column(name = "USER_ID", unique = true, nullable = false, precision = 22, scale = 0)
	public Integer getUserId() {
		return this.userId;
	}

	public void setUserId(Integer userId) {
		this.userId = userId;
	}

	@Column(name = "EMAIL_ADDR", length = 200)
	public String getEmailAddr() {
		return this.emailAddr;
	}

	public void setEmailAddr(String emailAddr) {
		this.emailAddr = emailAddr;
	}

	@Column(name = "CREATED_DATE")
	public Date getCreatedDate() {
		return this.createdDate;
	}

	public void setCreatedDate(Date createdDate) {
		this.createdDate = createdDate;
	}

	@Column(name = "CREATED_BY", length = 100)
	public String getCreatedBy() {
		return this.createdBy;
	}

	public void setCreatedBy(String createdBy) {
		this.createdBy = createdBy;
	}

	@Column(name = "UPDATED_DATE")
	public Date getUpdatedDate() {
		return this.updatedDate;
	}

	public void setUpdatedDate(Date updatedDate) {
		this.updatedDate = updatedDate;
	}

	@Column(name = "UPDATED_BY", length = 100)
	public String getUpdatedBy() {
		return this.updatedBy;
	}

	public void setUpdatedBy(String updatedBy) {
		this.updatedBy = updatedBy;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "users")
	public Set<UserReferenceData> getUserReferenceDatas() {
		return this.userReferenceDatas;
	}

	public void setUserReferenceDatas(Set<UserReferenceData> userReferenceDatas) {
		this.userReferenceDatas = userReferenceDatas;
	}

	@OneToOne(fetch = FetchType.LAZY, mappedBy = "users")
	public AdminDetails getAdminDetails() {
		return this.adminDetails;
	}

	public void setAdminDetails(AdminDetails adminDetails) {
		this.adminDetails = adminDetails;
	}

	@OneToOne(fetch = FetchType.LAZY, mappedBy = "users")
	public AuthorProfile getAuthorProfile() {
		return this.authorProfile;
	}

	public void setAuthorProfile(AuthorProfile authorProfile) {
		this.authorProfile = authorProfile;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "USER_ROLES", joinColumns = { @JoinColumn(name = "USER_ID", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "ROLE_ID", nullable = false, updatable = false) })
	public Set<Roles> getRoleses() {
		return this.roleses;
	}

	public void setRoleses(Set<Roles> roleses) {
		this.roleses = roleses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "users")
	public Set<AdditionalPermissions> getAdditionalPermissionses() {
		return this.additionalPermissionses;
	}

	public void setAdditionalPermissionses(
			Set<AdditionalPermissions> additionalPermissionses) {
		this.additionalPermissionses = additionalPermissionses;
	}

}
